---
AWSTemplateFormatVersion: 2010-09-09
Transform:
  - "AWS::Serverless-2016-10-31"
  - "AWS::SecretsManager-2020-07-23"

Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.

Resources:
  EipA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipA.AllocationId
      SubnetId:
        !Select [
          0,
          !Split [
            ",",
            { "Fn::ImportValue": !Sub "${App}-${Env}-PublicSubnets" },
          ],
        ]

  RouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { "Fn::ImportValue": !Sub "${App}-${Env}-VpcId" }

  RouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTableA
      SubnetId:
        !Select [
          0,
          !Split [
            ",",
            { "Fn::ImportValue": !Sub "${App}-${Env}-PrivateSubnets" },
          ],
        ]

  DefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayA

  EipB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipB.AllocationId
      SubnetId:
        !Select [
          1,
          !Split [
            ",",
            { "Fn::ImportValue": !Sub "${App}-${Env}-PublicSubnets" },
          ],
        ]

  RouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { "Fn::ImportValue": !Sub "${App}-${Env}-VpcId" }

  RouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTableB
      SubnetId:
        !Select [
          1,
          !Split [
            ",",
            { "Fn::ImportValue": !Sub "${App}-${Env}-PrivateSubnets" },
          ],
        ]

  DefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGatewayB

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Ref "AWS::StackName"
      SubnetIds:
        !Split [",", { "Fn::ImportValue": !Sub "${App}-${Env}-PrivateSubnets" }]

  ClusterSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      SecurityGroupIngress:
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: "from 0.0.0.0/0:5432"
          CidrIp: 0.0.0.0/0
      VpcId: { "Fn::ImportValue": !Sub "${App}-${Env}-VpcId" }
      GroupDescription: RDS security group
      SecurityGroupEgress:
        - IpProtocol: "-1"
          Description: Allow all outbound traffic by default
          CidrIp: 0.0.0.0/0

  SecurityGroupfromRDSStackdbCredentialsRotationSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: !Ref "AWS::StackName"
      FromPort:
        Fn::GetAtt:
          - AuroraDBCluster
          - Endpoint.Port
      GroupId:
        Fn::GetAtt:
          - ClusterSecurityGroup
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - RotationSecurityGroup
          - GroupId
      ToPort:
        Fn::GetAtt:
          - AuroraDBCluster
          - Endpoint.Port

  RotationSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: { "Fn::ImportValue": !Sub "${App}-${Env}-VpcId" }
      GroupDescription: !Ref "AWS::StackName"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          Description: Allow all outbound traffic by default
          CidrIp: 0.0.0.0/0

  AuroraSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ["/", [!Ref App, !Ref Env, !Ref Name, "aurora-pg"]]
      Description:
        !Join [
          "",
          [
            "Aurora PostgreSQL Main User Secret ",
            "for CloudFormation Stack ",
            !Ref "AWS::StackName",
          ],
        ]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16

  SecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraSecret
      TargetId: !Ref AuroraDBCluster
      TargetType: AWS::RDS::DBCluster

  SecretRotationTemplate:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSPostgreSQLRotationSingleUser
        SemanticVersion: 1.1.60
      Parameters:
        endpoint: !Sub https://secretsmanager.${AWS::Region}.amazonaws.com
        functionName: !Sub ${AWS::StackName}-func
        vpcSecurityGroupIds: !Ref RotationSecurityGroup
        vpcSubnetIds:
          Fn::Join:
            - ","
            - - !Select [
                  0,
                  !Split [
                    ",",
                    { "Fn::ImportValue": !Sub "${App}-${Env}-PrivateSubnets" },
                  ],
                ]
              - !Select [
                  1,
                  !Split [
                    ",",
                    { "Fn::ImportValue": !Sub "${App}-${Env}-PrivateSubnets" },
                  ],
                ]

  SecretCredentialPolicy:
    Type: "AWS::SecretsManager::ResourcePolicy"
    Properties:
      SecretId: !Ref AuroraSecret
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Action: "secretsmanager:DeleteSecret"
            Resource: "*"
            Effect: Deny
            Principal:
              AWS: !Join
                - ""
                - - "arn:"
                  - !Ref "AWS::Partition"
                  - ":iam::"
                  - !Ref "AWS::AccountId"
                  - ":root"

  SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref AuroraSecret
      RotationLambdaARN: !GetAtt SecretRotationTemplate.Outputs.RotationLambdaARN
      RotationRules:
        AutomaticallyAfterDays: 30

  AuroraDBCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref AuroraSecret,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref AuroraSecret,
            ":SecretString:password}}",
          ],
        ]
      DatabaseName: "tododb"
      Engine: aurora-postgresql
      EngineVersion: "10.7"
      EngineMode: serverless
      StorageEncrypted: true
      DBClusterParameterGroupName: default.aurora-postgresql10
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ClusterSecurityGroup
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 8
        SecondsUntilAutoPause: 1000

Outputs:
  PostgresHost: # injected as POSTGRES_HOST environment variable by Copilot.
    Description: "The connection endpoint for the DB cluster."
    Value:
      !Join [
        "",
        [
          "{{resolve:secretsmanager:",
          !Ref AuroraSecret,
          ":SecretString:host}}",
        ],
      ]

  PostgresPass: # injected as POSTGRES_PASS environment variable by Copilot.
    Description: "The secret that username and password."
    Value:
      !Join [
        "",
        [
          "{{resolve:secretsmanager:",
          !Ref AuroraSecret,
          ":SecretString:password}}",
        ],
      ]

  PostgresUser: # injected as POSTGRES_USER environment variable by Copilot.
    Description: "username"
    Value:
      !Join [
        "",
        [
          "{{resolve:secretsmanager:",
          !Ref AuroraSecret,
          ":SecretString:username}}",
        ],
      ]

  PostgresName: # injected as POSTGRES_NAME environment variable by Copilot.
    Description: "db name"
    Value:
      !Join [
        "",
        [
          "{{resolve:secretsmanager:",
          !Ref AuroraSecret,
          ":SecretString:dbname}}",
        ],
      ]

  PostgresPort: # injected as POSTGRES_PORT environment variable by Copilot.
    Description: "port"
    Value:
      !Join [
        "",
        [
          "{{resolve:secretsmanager:",
          !Ref AuroraSecret,
          ":SecretString:port}}",
        ],
      ]
